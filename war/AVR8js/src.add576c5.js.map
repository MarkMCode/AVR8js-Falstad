{"version":3,"sources":["compile.ts","cpu-performance.ts","../../src/cpu/cpu.ts","../../src/cpu/instruction.ts","../../src/cpu/interrupt.ts","../../src/peripherals/gpio.ts","../../src/peripherals/timer.ts","../../src/peripherals/usart.ts","../../src/peripherals/eeprom.ts","../../src/peripherals/twi.ts","../../src/index.ts","intelhex.ts","task-scheduler.ts","execute.ts","format-time.ts","utils/editor-history.util.ts","index.ts"],"names":[],"mappings":"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","file":"src.add576c5.js","sourceRoot":"..\\src","sourcesContent":["const url = 'https://hexi.wokwi.com';\r\n\r\nexport interface HexiResult {\r\n  stdout: string;\r\n  stderr: string;\r\n  hex: string;\r\n}\r\n\r\nexport async function buildHex(source: string) {\r\n  const resp = await fetch(url + '/build', {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ sketch: source }),\r\n  });\r\n  return (await resp.json()) as HexiResult;\r\n}\r\n","import { ICPU } from 'avr8js';\r\n\r\nexport class CPUPerformance {\r\n  private prevTime = 0;\r\n  private prevCycles = 0;\r\n  private samples = new Float32Array(64);\r\n  private sampleIndex = 0;\r\n\r\n  constructor(private cpu: ICPU, private MHZ: number) {}\r\n\r\n  reset() {\r\n    this.prevTime = 0;\r\n    this.prevCycles = 0;\r\n    this.sampleIndex = 0;\r\n  }\r\n\r\n  update() {\r\n    if (this.prevTime) {\r\n      const delta = performance.now() - this.prevTime;\r\n      const deltaCycles = this.cpu.cycles - this.prevCycles;\r\n      const deltaCpuMillis = 1000 * (deltaCycles / this.MHZ);\r\n      const factor = deltaCpuMillis / delta;\r\n      if (!this.sampleIndex) {\r\n        this.samples.fill(factor);\r\n      }\r\n      this.samples[this.sampleIndex++ % this.samples.length] = factor;\r\n    }\r\n    this.prevCycles = this.cpu.cycles;\r\n    this.prevTime = performance.now();\r\n    const avg = this.samples.reduce((x, y) => x + y) / this.samples.length;\r\n    return avg;\r\n  }\r\n}\r\n","/**\r\n * AVR 8 CPU data structures\r\n * Part of AVR8js\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\n\r\nimport { u32, u16, u8 } from '../types';\r\n\r\nconst registerSpace = 0x100;\r\n\r\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\r\nexport interface ICPU {\r\n  readonly data: Uint8Array;\r\n  readonly dataView: DataView;\r\n  readonly progMem: Uint16Array;\r\n  readonly progBytes: Uint8Array;\r\n\r\n  /**\r\n   * Whether the program counter (PC) can address 22 bits (the default is 16)\r\n   */\r\n  readonly pc22Bits: boolean;\r\n\r\n  /**\r\n   * Program counter\r\n   */\r\n  pc: u32;\r\n\r\n  /**\r\n   * Clock cycle counter\r\n   */\r\n  cycles: number;\r\n\r\n  readData(addr: u16): u8;\r\n  writeData(addr: u16, value: u8): void;\r\n}\r\n\r\nexport type CPUMemoryHook = (value: u8, oldValue: u8, addr: u16) => boolean | void;\r\nexport interface CPUMemoryHooks {\r\n  [key: number]: CPUMemoryHook;\r\n}\r\n\r\nexport type CPUMemoryReadHook = (addr: u16) => u8;\r\nexport interface CPUMemoryReadHooks {\r\n  [key: number]: CPUMemoryReadHook;\r\n}\r\n\r\nexport class CPU implements ICPU {\r\n  readonly data: Uint8Array = new Uint8Array(this.sramBytes + registerSpace);\r\n  readonly data16 = new Uint16Array(this.data.buffer);\r\n  readonly dataView = new DataView(this.data.buffer);\r\n  readonly progBytes = new Uint8Array(this.progMem.buffer);\r\n  readonly readHooks: CPUMemoryReadHooks = [];\r\n  readonly writeHooks: CPUMemoryHooks = [];\r\n  readonly pc22Bits = this.progBytes.length > 0x20000;\r\n\r\n  // This lets the Timer Compare output override GPIO pins:\r\n  readonly gpioTimerHooks: CPUMemoryHooks = [];\r\n\r\n  pc = 0;\r\n  cycles = 0;\r\n\r\n  constructor(public progMem: Uint16Array, private sramBytes = 8192) {\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.data.fill(0);\r\n    this.SP = this.data.length - 1;\r\n  }\r\n\r\n  readData(addr: number) {\r\n    if (addr >= 32 && this.readHooks[addr]) {\r\n      return this.readHooks[addr](addr);\r\n    }\r\n    return this.data[addr];\r\n  }\r\n\r\n  writeData(addr: number, value: number) {\r\n    const hook = this.writeHooks[addr];\r\n    if (hook) {\r\n      if (hook(value, this.data[addr], addr)) {\r\n        return;\r\n      }\r\n    }\r\n    this.data[addr] = value;\r\n  }\r\n\r\n  get SP() {\r\n    return this.dataView.getUint16(93, true);\r\n  }\r\n\r\n  set SP(value: number) {\r\n    this.dataView.setUint16(93, value, true);\r\n  }\r\n\r\n  get SREG() {\r\n    return this.data[95];\r\n  }\r\n\r\n  get interruptsEnabled() {\r\n    return this.SREG & 0x80 ? true : false;\r\n  }\r\n}\r\n","/**\r\n * AVR-8 Instruction Simulation\r\n * Part of AVR8js\r\n *\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Instruction timing is currently based on ATmega328p (see the Instruction Set Summary at the end of\r\n * the datasheet)\r\n *\r\n * Copyright (C) 2019, 2020 Uri Shaked\r\n */\r\n\r\nimport { ICPU } from './cpu';\r\nimport { u16 } from '../types';\r\n\r\nfunction isTwoWordInstruction(opcode: u16) {\r\n  return (\r\n    /* LDS */\r\n    (opcode & 0xfe0f) === 0x9000 ||\r\n    /* STS */\r\n    (opcode & 0xfe0f) === 0x9200 ||\r\n    /* CALL */\r\n    (opcode & 0xfe0e) === 0x940e ||\r\n    /* JMP */\r\n    (opcode & 0xfe0e) === 0x940c\r\n  );\r\n}\r\n\r\nexport function avrInstruction(cpu: ICPU) {\r\n  const opcode = cpu.progMem[cpu.pc];\r\n\r\n  if ((opcode & 0xfc00) === 0x1c00) {\r\n    /* ADC, 0001 11rd dddd rrrr */\r\n    const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    const sum = d + r + (cpu.data[95] & 1);\r\n    const R = sum & 255;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (R ^ r) & (d ^ R) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= sum & 256 ? 1 : 0;\r\n    sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0xc00) {\r\n    /* ADD, 0000 11rd dddd rrrr */\r\n    const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    const R = (d + r) & 255;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (R ^ r) & (R ^ d) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= (d + r) & 256 ? 1 : 0;\r\n    sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xff00) === 0x9600) {\r\n    /* ADIW, 1001 0110 KKdd KKKK */\r\n    const addr = 2 * ((opcode & 0x30) >> 4) + 24;\r\n    const value = cpu.dataView.getUint16(addr, true);\r\n    const R = (value + ((opcode & 0xf) | ((opcode & 0xc0) >> 2))) & 0xffff;\r\n    cpu.dataView.setUint16(addr, R, true);\r\n    let sreg = cpu.data[95] & 0xe0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 0x8000 & R ? 4 : 0;\r\n    sreg |= ~value & R & 0x8000 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= ~R & value & 0x8000 ? 1 : 0;\r\n    cpu.data[95] = sreg;\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfc00) === 0x2000) {\r\n    /* AND, 0010 00rd dddd rrrr */\r\n    const R = cpu.data[(opcode & 0x1f0) >> 4] & cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf000) === 0x7000) {\r\n    /* ANDI, 0111 KKKK dddd KKKK */\r\n    const R = cpu.data[((opcode & 0xf0) >> 4) + 16] & ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n    cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfe0f) === 0x9405) {\r\n    /* ASR, 1001 010d dddd 0101 */\r\n    const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const R = (value >>> 1) | (128 & value);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= value & 1;\r\n    sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xff8f) === 0x9488) {\r\n    /* BCLR, 1001 0100 1sss 1000 */\r\n    cpu.data[95] &= ~(1 << ((opcode & 0x70) >> 4));\r\n  } else if ((opcode & 0xfe08) === 0xf800) {\r\n    /* BLD, 1111 100d dddd 0bbb */\r\n    const b = opcode & 7;\r\n    const d = (opcode & 0x1f0) >> 4;\r\n    cpu.data[d] = (~(1 << b) & cpu.data[d]) | (((cpu.data[95] >> 6) & 1) << b);\r\n  } else if ((opcode & 0xfc00) === 0xf400) {\r\n    /* BRBC, 1111 01kk kkkk ksss */\r\n    if (!(cpu.data[95] & (1 << (opcode & 7)))) {\r\n      cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n      cpu.cycles++;\r\n    }\r\n  } else if ((opcode & 0xfc00) === 0xf000) {\r\n    /* BRBS, 1111 00kk kkkk ksss */\r\n    if (cpu.data[95] & (1 << (opcode & 7))) {\r\n      cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n      cpu.cycles++;\r\n    }\r\n  } else if ((opcode & 0xff8f) === 0x9408) {\r\n    /* BSET, 1001 0100 0sss 1000 */\r\n    cpu.data[95] |= 1 << ((opcode & 0x70) >> 4);\r\n  } else if ((opcode & 0xfe08) === 0xfa00) {\r\n    /* BST, 1111 101d dddd 0bbb */\r\n    const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const b = opcode & 7;\r\n    cpu.data[95] = (cpu.data[95] & 0xbf) | ((d >> b) & 1 ? 0x40 : 0);\r\n  } else if ((opcode & 0xfe0e) === 0x940e) {\r\n    /* CALL, 1001 010k kkkk 111k kkkk kkkk kkkk kkkk */\r\n    const k = cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13);\r\n    const ret = cpu.pc + 2;\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    const { pc22Bits } = cpu;\r\n    cpu.data[sp] = 255 & ret;\r\n    cpu.data[sp - 1] = (ret >> 8) & 255;\r\n    if (pc22Bits) {\r\n      cpu.data[sp - 2] = (ret >> 16) & 255;\r\n    }\r\n    cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n    cpu.pc = k - 1;\r\n    cpu.cycles += pc22Bits ? 4 : 3;\r\n  } else if ((opcode & 0xff00) === 0x9800) {\r\n    /* CBI, 1001 1000 AAAA Abbb */\r\n    const A = opcode & 0xf8;\r\n    const b = opcode & 7;\r\n    const R = cpu.readData((A >> 3) + 32);\r\n    cpu.writeData((A >> 3) + 32, R & ~(1 << b));\r\n  } else if ((opcode & 0xfe0f) === 0x9400) {\r\n    /* COM, 1001 010d dddd 0000 */\r\n    const d = (opcode & 0x1f0) >> 4;\r\n    const R = 255 - cpu.data[d];\r\n    cpu.data[d] = R;\r\n    let sreg = (cpu.data[95] & 0xe1) | 1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0x1400) {\r\n    /* CP, 0001 01rd dddd rrrr */\r\n    const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    const R = val1 - val2;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= 0 !== ((val1 ^ val2) & (val1 ^ R) & 128) ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= val2 > val1 ? 1 : 0;\r\n    sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0x400) {\r\n    /* CPC, 0000 01rd dddd rrrr */\r\n    const arg1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const arg2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    let sreg = cpu.data[95];\r\n    const r = arg1 - arg2 - (sreg & 1);\r\n    sreg = (sreg & 0xc0) | (!r && (sreg >> 1) & 1 ? 2 : 0) | (arg2 + (sreg & 1) > arg1 ? 1 : 0);\r\n    sreg |= 128 & r ? 4 : 0;\r\n    sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf000) === 0x3000) {\r\n    /* CPI, 0011 KKKK dddd KKKK */\r\n    const arg1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n    const arg2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n    const r = arg1 - arg2;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= r ? 0 : 2;\r\n    sreg |= 128 & r ? 4 : 0;\r\n    sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= arg2 > arg1 ? 1 : 0;\r\n    sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0x1000) {\r\n    /* CPSE, 0001 00rd dddd rrrr */\r\n    if (cpu.data[(opcode & 0x1f0) >> 4] === cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)]) {\r\n      const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n      const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n      cpu.pc += skipSize;\r\n      cpu.cycles += skipSize;\r\n    }\r\n  } else if ((opcode & 0xfe0f) === 0x940a) {\r\n    /* DEC, 1001 010d dddd 1010 */\r\n    const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const R = value - 1;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= 128 === value ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if (opcode === 0x9519) {\r\n    /* EICALL, 1001 0101 0001 1001 */\r\n    const retAddr = cpu.pc + 1;\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    const eind = cpu.data[0x3c];\r\n    cpu.data[sp] = retAddr & 255;\r\n    cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n    cpu.dataView.setUint16(93, sp - 2, true);\r\n    cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n    cpu.cycles += 3;\r\n  } else if (opcode === 0x9419) {\r\n    /* EIJMP, 1001 0100 0001 1001 */\r\n    const eind = cpu.data[0x3c];\r\n    cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n    cpu.cycles++;\r\n  } else if (opcode === 0x95d8) {\r\n    /* ELPM, 1001 0101 1101 1000 */\r\n    const rampz = cpu.data[0x3b];\r\n    cpu.data[0] = cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9006) {\r\n    /* ELPM(REG), 1001 000d dddd 0110 */\r\n    const rampz = cpu.data[0x3b];\r\n    cpu.data[(opcode & 0x1f0) >> 4] =\r\n      cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9007) {\r\n    /* ELPM(INC), 1001 000d dddd 0111 */\r\n    const rampz = cpu.data[0x3b];\r\n    const i = cpu.dataView.getUint16(30, true);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[(rampz << 16) | i];\r\n    cpu.dataView.setUint16(30, i + 1, true);\r\n    if (i === 0xffff) {\r\n      cpu.data[0x3b] = (rampz + 1) % (cpu.progBytes.length >> 16);\r\n    }\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfc00) === 0x2400) {\r\n    /* EOR, 0010 01rd dddd rrrr */\r\n    const R = cpu.data[(opcode & 0x1f0) >> 4] ^ cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xff88) === 0x308) {\r\n    /* FMUL, 0000 0011 0ddd 1rrr */\r\n    const v1 = cpu.data[((opcode & 0x70) >> 4) + 16];\r\n    const v2 = cpu.data[(opcode & 7) + 16];\r\n    const R = (v1 * v2) << 1;\r\n    cpu.dataView.setUint16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xff88) === 0x380) {\r\n    /* FMULS, 0000 0011 1ddd 0rrr */\r\n    const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n    const v2 = cpu.dataView.getInt8((opcode & 7) + 16);\r\n    const R = (v1 * v2) << 1;\r\n    cpu.dataView.setInt16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xff88) === 0x388) {\r\n    /* FMULSU, 0000 0011 1ddd 1rrr */\r\n    const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n    const v2 = cpu.data[(opcode & 7) + 16];\r\n    const R = (v1 * v2) << 1;\r\n    cpu.dataView.setInt16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 2 : 0) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if (opcode === 0x9509) {\r\n    /* ICALL, 1001 0101 0000 1001 */\r\n    const retAddr = cpu.pc + 1;\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    const { pc22Bits } = cpu;\r\n    cpu.data[sp] = retAddr & 255;\r\n    cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n    if (pc22Bits) {\r\n      cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n    }\r\n    cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n    cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n    cpu.cycles += pc22Bits ? 3 : 2;\r\n  } else if (opcode === 0x9409) {\r\n    /* IJMP, 1001 0100 0000 1001 */\r\n    cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xf800) === 0xb000) {\r\n    /* IN, 1011 0AAd dddd AAAA */\r\n    const i = cpu.readData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = i;\r\n  } else if ((opcode & 0xfe0f) === 0x9403) {\r\n    /* INC, 1001 010d dddd 0011 */\r\n    const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const r = (d + 1) & 255;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= r ? 0 : 2;\r\n    sreg |= 128 & r ? 4 : 0;\r\n    sreg |= 127 === d ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfe0e) === 0x940c) {\r\n    /* JMP, 1001 010k kkkk 110k kkkk kkkk kkkk kkkk */\r\n    cpu.pc = (cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13)) - 1;\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9206) {\r\n    /* LAC, 1001 001r rrrr 0110 */\r\n    const r = (opcode & 0x1f0) >> 4;\r\n    const clear = cpu.data[r];\r\n    const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n    cpu.writeData(cpu.dataView.getUint16(30, true), value & (255 - clear));\r\n    cpu.data[r] = value;\r\n  } else if ((opcode & 0xfe0f) === 0x9205) {\r\n    /* LAS, 1001 001r rrrr 0101 */\r\n    const r = (opcode & 0x1f0) >> 4;\r\n    const set = cpu.data[r];\r\n    const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n    cpu.writeData(cpu.dataView.getUint16(30, true), value | set);\r\n    cpu.data[r] = value;\r\n  } else if ((opcode & 0xfe0f) === 0x9207) {\r\n    /* LAT, 1001 001r rrrr 0111 */\r\n    const r = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const R = cpu.readData(cpu.dataView.getUint16(30, true));\r\n    cpu.writeData(cpu.dataView.getUint16(30, true), r ^ R);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n  } else if ((opcode & 0xf000) === 0xe000) {\r\n    /* LDI, 1110 KKKK dddd KKKK */\r\n    cpu.data[((opcode & 0xf0) >> 4) + 16] = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n  } else if ((opcode & 0xfe0f) === 0x9000) {\r\n    /* LDS, 1001 000d dddd 0000 kkkk kkkk kkkk kkkk */\r\n    cpu.cycles++;\r\n    const value = cpu.readData(cpu.progMem[cpu.pc + 1]);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = value;\r\n    cpu.pc++;\r\n  } else if ((opcode & 0xfe0f) === 0x900c) {\r\n    /* LDX, 1001 000d dddd 1100 */\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(26, true));\r\n  } else if ((opcode & 0xfe0f) === 0x900d) {\r\n    /* LDX(INC), 1001 000d dddd 1101 */\r\n    const x = cpu.dataView.getUint16(26, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n    cpu.dataView.setUint16(26, x + 1, true);\r\n  } else if ((opcode & 0xfe0f) === 0x900e) {\r\n    /* LDX(DEC), 1001 000d dddd 1110 */\r\n    const x = cpu.dataView.getUint16(26, true) - 1;\r\n    cpu.dataView.setUint16(26, x, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n  } else if ((opcode & 0xfe0f) === 0x8008) {\r\n    /* LDY, 1000 000d dddd 1000 */\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(28, true));\r\n  } else if ((opcode & 0xfe0f) === 0x9009) {\r\n    /* LDY(INC), 1001 000d dddd 1001 */\r\n    const y = cpu.dataView.getUint16(28, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n    cpu.dataView.setUint16(28, y + 1, true);\r\n  } else if ((opcode & 0xfe0f) === 0x900a) {\r\n    /* LDY(DEC), 1001 000d dddd 1010 */\r\n    const y = cpu.dataView.getUint16(28, true) - 1;\r\n    cpu.dataView.setUint16(28, y, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n  } else if (\r\n    (opcode & 0xd208) === 0x8008 &&\r\n    (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)\r\n  ) {\r\n    /* LDDY, 10q0 qq0d dddd 1qqq */\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(\r\n      cpu.dataView.getUint16(28, true) +\r\n        ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8))\r\n    );\r\n  } else if ((opcode & 0xfe0f) === 0x8000) {\r\n    /* LDZ, 1000 000d dddd 0000 */\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(30, true));\r\n  } else if ((opcode & 0xfe0f) === 0x9001) {\r\n    /* LDZ(INC), 1001 000d dddd 0001 */\r\n    const z = cpu.dataView.getUint16(30, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n    cpu.dataView.setUint16(30, z + 1, true);\r\n  } else if ((opcode & 0xfe0f) === 0x9002) {\r\n    /* LDZ(DEC), 1001 000d dddd 0010 */\r\n    const z = cpu.dataView.getUint16(30, true) - 1;\r\n    cpu.dataView.setUint16(30, z, true);\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n  } else if (\r\n    (opcode & 0xd208) === 0x8000 &&\r\n    (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)\r\n  ) {\r\n    /* LDDZ, 10q0 qq0d dddd 0qqq */\r\n    cpu.cycles++;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(\r\n      cpu.dataView.getUint16(30, true) +\r\n        ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8))\r\n    );\r\n  } else if (opcode === 0x95c8) {\r\n    /* LPM, 1001 0101 1100 1000 */\r\n    cpu.data[0] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9004) {\r\n    /* LPM(REG), 1001 000d dddd 0100 */\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9005) {\r\n    /* LPM(INC), 1001 000d dddd 0101 */\r\n    const i = cpu.dataView.getUint16(30, true);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[i];\r\n    cpu.dataView.setUint16(30, i + 1, true);\r\n    cpu.cycles += 2;\r\n  } else if ((opcode & 0xfe0f) === 0x9406) {\r\n    /* LSR, 1001 010d dddd 0110 */\r\n    const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const R = value >>> 1;\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= value & 1;\r\n    sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0x2c00) {\r\n    /* MOV, 0010 11rd dddd rrrr */\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n  } else if ((opcode & 0xff00) === 0x100) {\r\n    /* MOVW, 0000 0001 dddd rrrr */\r\n    const r2 = 2 * (opcode & 0xf);\r\n    const d2 = 2 * ((opcode & 0xf0) >> 4);\r\n    cpu.data[d2] = cpu.data[r2];\r\n    cpu.data[d2 + 1] = cpu.data[r2 + 1];\r\n  } else if ((opcode & 0xfc00) === 0x9c00) {\r\n    /* MUL, 1001 11rd dddd rrrr */\r\n    const R = cpu.data[(opcode & 0x1f0) >> 4] * cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    cpu.dataView.setUint16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xff00) === 0x200) {\r\n    /* MULS, 0000 0010 dddd rrrr */\r\n    const R =\r\n      cpu.dataView.getInt8(((opcode & 0xf0) >> 4) + 16) * cpu.dataView.getInt8((opcode & 0xf) + 16);\r\n    cpu.dataView.setInt16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xff88) === 0x300) {\r\n    /* MULSU, 0000 0011 0ddd 0rrr */\r\n    const R = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16) * cpu.data[(opcode & 7) + 16];\r\n    cpu.dataView.setInt16(0, R, true);\r\n    cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x9401) {\r\n    /* NEG, 1001 010d dddd 0001 */\r\n    const d = (opcode & 0x1f0) >> 4;\r\n    const value = cpu.data[d];\r\n    const R = 0 - value;\r\n    cpu.data[d] = R;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= 128 === R ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= R ? 1 : 0;\r\n    sreg |= 1 & (R | value) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if (opcode === 0) {\r\n    /* NOP, 0000 0000 0000 0000 */\r\n    /* NOP */\r\n  } else if ((opcode & 0xfc00) === 0x2800) {\r\n    /* OR, 0010 10rd dddd rrrr */\r\n    const R = cpu.data[(opcode & 0x1f0) >> 4] | cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf000) === 0x6000) {\r\n    /* SBR, 0110 KKKK dddd KKKK */\r\n    const R = cpu.data[((opcode & 0xf0) >> 4) + 16] | ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n    cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n    let sreg = cpu.data[95] & 0xe1;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf800) === 0xb800) {\r\n    /* OUT, 1011 1AAr rrrr AAAA */\r\n    cpu.writeData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32, cpu.data[(opcode & 0x1f0) >> 4]);\r\n  } else if ((opcode & 0xfe0f) === 0x900f) {\r\n    /* POP, 1001 000d dddd 1111 */\r\n    const value = cpu.dataView.getUint16(93, true) + 1;\r\n    cpu.dataView.setUint16(93, value, true);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[value];\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x920f) {\r\n    /* PUSH, 1001 001d dddd 1111 */\r\n    const value = cpu.dataView.getUint16(93, true);\r\n    cpu.data[value] = cpu.data[(opcode & 0x1f0) >> 4];\r\n    cpu.dataView.setUint16(93, value - 1, true);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xf000) === 0xd000) {\r\n    /* RCALL, 1101 kkkk kkkk kkkk */\r\n    const k = (opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0);\r\n    const retAddr = cpu.pc + 1;\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    const { pc22Bits } = cpu;\r\n    cpu.data[sp] = 255 & retAddr;\r\n    cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n    if (pc22Bits) {\r\n      cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n    }\r\n    cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n    cpu.pc += k;\r\n    cpu.cycles += pc22Bits ? 3 : 2;\r\n  } else if (opcode === 0x9508) {\r\n    /* RET, 1001 0101 0000 1000 */\r\n    const { pc22Bits } = cpu;\r\n    const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n    cpu.dataView.setUint16(93, i, true);\r\n    cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n    if (pc22Bits) {\r\n      cpu.pc |= cpu.data[i - 2] << 16;\r\n    }\r\n    cpu.cycles += pc22Bits ? 4 : 3;\r\n  } else if (opcode === 0x9518) {\r\n    /* RETI, 1001 0101 0001 1000 */\r\n    const { pc22Bits } = cpu;\r\n    const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n    cpu.dataView.setUint16(93, i, true);\r\n    cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n    if (pc22Bits) {\r\n      cpu.pc |= cpu.data[i - 2] << 16;\r\n    }\r\n    cpu.cycles += pc22Bits ? 4 : 3;\r\n    cpu.data[95] |= 0x80; // Enable interrupts\r\n  } else if ((opcode & 0xf000) === 0xc000) {\r\n    /* RJMP, 1100 kkkk kkkk kkkk */\r\n    cpu.pc = cpu.pc + ((opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0));\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x9407) {\r\n    /* ROR, 1001 010d dddd 0111 */\r\n    const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const r = (d >>> 1) | ((cpu.data[95] & 1) << 7);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n    let sreg = cpu.data[95] & 0xe0;\r\n    sreg |= r ? 0 : 2;\r\n    sreg |= 128 & r ? 4 : 0;\r\n    sreg |= 1 & d ? 1 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfc00) === 0x800) {\r\n    /* SBC, 0000 10rd dddd rrrr */\r\n    const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    let sreg = cpu.data[95];\r\n    const R = val1 - val2 - (sreg & 1);\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf000) === 0x4000) {\r\n    /* SBCI, 0100 KKKK dddd KKKK */\r\n    const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n    const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n    let sreg = cpu.data[95];\r\n    const R = val1 - val2 - (sreg & 1);\r\n    cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n    sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xff00) === 0x9a00) {\r\n    /* SBI, 1001 1010 AAAA Abbb */\r\n    const target = ((opcode & 0xf8) >> 3) + 32;\r\n    cpu.writeData(target, cpu.readData(target) | (1 << (opcode & 7)));\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xff00) === 0x9900) {\r\n    /* SBIC, 1001 1001 AAAA Abbb */\r\n    const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n    if (!(value & (1 << (opcode & 7)))) {\r\n      const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n      const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n      cpu.cycles += skipSize;\r\n      cpu.pc += skipSize;\r\n    }\r\n  } else if ((opcode & 0xff00) === 0x9b00) {\r\n    /* SBIS, 1001 1011 AAAA Abbb */\r\n    const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n    if (value & (1 << (opcode & 7))) {\r\n      const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n      const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n      cpu.cycles += skipSize;\r\n      cpu.pc += skipSize;\r\n    }\r\n  } else if ((opcode & 0xff00) === 0x9700) {\r\n    /* SBIW, 1001 0111 KKdd KKKK */\r\n    const i = 2 * ((opcode & 0x30) >> 4) + 24;\r\n    const a = cpu.dataView.getUint16(i, true);\r\n    const l = (opcode & 0xf) | ((opcode & 0xc0) >> 2);\r\n    const R = a - l;\r\n    cpu.dataView.setUint16(i, R, true);\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 0x8000 & R ? 4 : 0;\r\n    sreg |= a & ~R & 0x8000 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= l > a ? 1 : 0;\r\n    sreg |= 1 & ((~a & l) | (l & R) | (R & ~a)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe08) === 0xfc00) {\r\n    /* SBRC, 1111 110r rrrr 0bbb */\r\n    if (!(cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7)))) {\r\n      const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n      const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n      cpu.cycles += skipSize;\r\n      cpu.pc += skipSize;\r\n    }\r\n  } else if ((opcode & 0xfe08) === 0xfe00) {\r\n    /* SBRS, 1111 111r rrrr 0bbb */\r\n    if (cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7))) {\r\n      const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n      const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n      cpu.cycles += skipSize;\r\n      cpu.pc += skipSize;\r\n    }\r\n  } else if (opcode === 0x9588) {\r\n    /* SLEEP, 1001 0101 1000 1000 */\r\n    /* not implemented */\r\n  } else if (opcode === 0x95e8) {\r\n    /* SPM, 1001 0101 1110 1000 */\r\n    /* not implemented */\r\n  } else if (opcode === 0x95f8) {\r\n    /* SPM(INC), 1001 0101 1111 1000 */\r\n    /* not implemented */\r\n  } else if ((opcode & 0xfe0f) === 0x9200) {\r\n    /* STS, 1001 001d dddd 0000 kkkk kkkk kkkk kkkk */\r\n    const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const addr = cpu.progMem[cpu.pc + 1];\r\n    cpu.writeData(addr, value);\r\n    cpu.pc++;\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x920c) {\r\n    /* STX, 1001 001r rrrr 1100 */\r\n    cpu.writeData(cpu.dataView.getUint16(26, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x920d) {\r\n    /* STX(INC), 1001 001r rrrr 1101 */\r\n    const x = cpu.dataView.getUint16(26, true);\r\n    cpu.writeData(x, cpu.data[(opcode & 0x1f0) >> 4]);\r\n    cpu.dataView.setUint16(26, x + 1, true);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x920e) {\r\n    /* STX(DEC), 1001 001r rrrr 1110 */\r\n    const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const x = cpu.dataView.getUint16(26, true) - 1;\r\n    cpu.dataView.setUint16(26, x, true);\r\n    cpu.writeData(x, i);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x8208) {\r\n    /* STY, 1000 001r rrrr 1000 */\r\n    cpu.writeData(cpu.dataView.getUint16(28, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x9209) {\r\n    /* STY(INC), 1001 001r rrrr 1001 */\r\n    const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const y = cpu.dataView.getUint16(28, true);\r\n    cpu.writeData(y, i);\r\n    cpu.dataView.setUint16(28, y + 1, true);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x920a) {\r\n    /* STY(DEC), 1001 001r rrrr 1010 */\r\n    const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const y = cpu.dataView.getUint16(28, true) - 1;\r\n    cpu.dataView.setUint16(28, y, true);\r\n    cpu.writeData(y, i);\r\n    cpu.cycles++;\r\n  } else if (\r\n    (opcode & 0xd208) === 0x8208 &&\r\n    (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)\r\n  ) {\r\n    /* STDY, 10q0 qq1r rrrr 1qqq */\r\n    cpu.writeData(\r\n      cpu.dataView.getUint16(28, true) +\r\n        ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)),\r\n      cpu.data[(opcode & 0x1f0) >> 4]\r\n    );\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x8200) {\r\n    /* STZ, 1000 001r rrrr 0000 */\r\n    cpu.writeData(cpu.dataView.getUint16(30, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x9201) {\r\n    /* STZ(INC), 1001 001r rrrr 0001 */\r\n    const z = cpu.dataView.getUint16(30, true);\r\n    cpu.writeData(z, cpu.data[(opcode & 0x1f0) >> 4]);\r\n    cpu.dataView.setUint16(30, z + 1, true);\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfe0f) === 0x9202) {\r\n    /* STZ(DEC), 1001 001r rrrr 0010 */\r\n    const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const z = cpu.dataView.getUint16(30, true) - 1;\r\n    cpu.dataView.setUint16(30, z, true);\r\n    cpu.writeData(z, i);\r\n    cpu.cycles++;\r\n  } else if (\r\n    (opcode & 0xd208) === 0x8200 &&\r\n    (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)\r\n  ) {\r\n    /* STDZ, 10q0 qq1r rrrr 0qqq */\r\n    cpu.writeData(\r\n      cpu.dataView.getUint16(30, true) +\r\n        ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)),\r\n      cpu.data[(opcode & 0x1f0) >> 4]\r\n    );\r\n    cpu.cycles++;\r\n  } else if ((opcode & 0xfc00) === 0x1800) {\r\n    /* SUB, 0001 10rd dddd rrrr */\r\n    const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n    const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    const R = val1 - val2;\r\n\r\n    cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= val2 > val1 ? 1 : 0;\r\n    sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xf000) === 0x5000) {\r\n    /* SUBI, 0101 KKKK dddd KKKK */\r\n    const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n    const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n    const R = val1 - val2;\r\n    cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n    let sreg = cpu.data[95] & 0xc0;\r\n    sreg |= R ? 0 : 2;\r\n    sreg |= 128 & R ? 4 : 0;\r\n    sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n    sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n    sreg |= val2 > val1 ? 1 : 0;\r\n    sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n    cpu.data[95] = sreg;\r\n  } else if ((opcode & 0xfe0f) === 0x9402) {\r\n    /* SWAP, 1001 010d dddd 0010 */\r\n    const d = (opcode & 0x1f0) >> 4;\r\n    const i = cpu.data[d];\r\n    cpu.data[d] = ((15 & i) << 4) | ((240 & i) >>> 4);\r\n  } else if (opcode === 0x95a8) {\r\n    /* WDR, 1001 0101 1010 1000 */\r\n    /* not implemented */\r\n  } else if ((opcode & 0xfe0f) === 0x9204) {\r\n    /* XCH, 1001 001r rrrr 0100 */\r\n    const r = (opcode & 0x1f0) >> 4;\r\n    const val1 = cpu.data[r];\r\n    const val2 = cpu.data[cpu.dataView.getUint16(30, true)];\r\n    cpu.data[cpu.dataView.getUint16(30, true)] = val1;\r\n    cpu.data[r] = val2;\r\n  }\r\n\r\n  cpu.pc = (cpu.pc + 1) % cpu.progMem.length;\r\n  cpu.cycles++;\r\n}\r\n","/**\r\n * AVR-8 Interrupt Handling\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\n\r\nimport { ICPU } from './cpu';\r\n\r\nexport function avrInterrupt(cpu: ICPU, addr: number) {\r\n  const sp = cpu.dataView.getUint16(93, true);\r\n  cpu.data[sp] = cpu.pc & 0xff;\r\n  cpu.data[sp - 1] = (cpu.pc >> 8) & 0xff;\r\n  cpu.dataView.setUint16(93, sp - 2, true);\r\n  cpu.data[95] &= 0x7f; // clear global interrupt flag\r\n  cpu.cycles += 2;\r\n  cpu.pc = addr;\r\n}\r\n","/**\r\n * AVR-8 GPIO Port implementation\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nimport { CPU } from '../cpu/cpu';\r\nimport { u8 } from '../types';\r\n\r\nexport interface AVRPortConfig {\r\n  // Register addresses\r\n  PIN: u8;\r\n  DDR: u8;\r\n  PORT: u8;\r\n}\r\n\r\nexport type GPIOListener = (value: u8, oldValue: u8) => void;\r\n\r\nexport const portAConfig: AVRPortConfig = {\r\n  PIN: 0x20,\r\n  DDR: 0x21,\r\n  PORT: 0x22,\r\n};\r\n\r\nexport const portBConfig: AVRPortConfig = {\r\n  PIN: 0x23,\r\n  DDR: 0x24,\r\n  PORT: 0x25,\r\n};\r\n\r\nexport const portCConfig: AVRPortConfig = {\r\n  PIN: 0x26,\r\n  DDR: 0x27,\r\n  PORT: 0x28,\r\n};\r\n\r\nexport const portDConfig: AVRPortConfig = {\r\n  PIN: 0x29,\r\n  DDR: 0x2a,\r\n  PORT: 0x2b,\r\n};\r\n\r\nexport const portEConfig: AVRPortConfig = {\r\n  PIN: 0x2c,\r\n  DDR: 0x2d,\r\n  PORT: 0x2e,\r\n};\r\n\r\nexport const portFConfig: AVRPortConfig = {\r\n  PIN: 0x2f,\r\n  DDR: 0x30,\r\n  PORT: 0x31,\r\n};\r\n\r\nexport const portGConfig: AVRPortConfig = {\r\n  PIN: 0x32,\r\n  DDR: 0x33,\r\n  PORT: 0x34,\r\n};\r\n\r\nexport const portHConfig: AVRPortConfig = {\r\n  PIN: 0x100,\r\n  DDR: 0x101,\r\n  PORT: 0x102,\r\n};\r\n\r\nexport const portJConfig: AVRPortConfig = {\r\n  PIN: 0x103,\r\n  DDR: 0x104,\r\n  PORT: 0x105,\r\n};\r\n\r\nexport const portKConfig: AVRPortConfig = {\r\n  PIN: 0x106,\r\n  DDR: 0x107,\r\n  PORT: 0x108,\r\n};\r\n\r\nexport const portLConfig: AVRPortConfig = {\r\n  PIN: 0x109,\r\n  DDR: 0x10a,\r\n  PORT: 0x10b,\r\n};\r\n\r\nexport enum PinState {\r\n  Low,\r\n  High,\r\n  Input,\r\n  InputPullUp,\r\n}\r\n\r\n/* This mechanism allows timers to override specific GPIO pins */\r\nexport enum PinOverrideMode {\r\n  None,\r\n  Enable,\r\n  Set,\r\n  Clear,\r\n  Toggle,\r\n}\r\n\r\nexport class AVRIOPort {\r\n  private listeners: GPIOListener[] = [];\r\n  private pinValue: u8 = 0;\r\n  private overrideMask: u8 = 0xff;\r\n  private overrideValue: u8;\r\n  private lastValue: u8 = 0;\r\n  private lastDdr: u8 = 0;\r\n\r\n  constructor(private cpu: CPU, private portConfig: AVRPortConfig) {\r\n    cpu.writeHooks[portConfig.DDR] = (value: u8) => {\r\n      const portValue = cpu.data[portConfig.PORT];\r\n      cpu.data[portConfig.DDR] = value;\r\n      this.updatePinRegister(portValue, value);\r\n      this.writeGpio(portValue, value);\r\n      return true;\r\n    };\r\n    cpu.writeHooks[portConfig.PORT] = (value: u8) => {\r\n      const ddrMask = cpu.data[portConfig.DDR];\r\n      cpu.data[portConfig.PORT] = value;\r\n      this.updatePinRegister(value, ddrMask);\r\n      this.writeGpio(value, ddrMask);\r\n      return true;\r\n    };\r\n    cpu.writeHooks[portConfig.PIN] = (value: u8) => {\r\n      // Writing to 1 PIN toggles PORT bits\r\n      const oldPortValue = cpu.data[portConfig.PORT];\r\n      const ddrMask = cpu.data[portConfig.DDR];\r\n      const portValue = oldPortValue ^ value;\r\n      cpu.data[portConfig.PORT] = portValue;\r\n      cpu.data[portConfig.PIN] = (cpu.data[portConfig.PIN] & ~ddrMask) | (portValue & ddrMask);\r\n      this.writeGpio(portValue, ddrMask);\r\n      return true;\r\n    };\r\n    // The following hook is used by the timer compare output to override GPIO pins:\r\n    cpu.gpioTimerHooks[portConfig.PORT] = (pin: u8, mode: PinOverrideMode) => {\r\n      const pinMask = 1 << pin;\r\n      if (mode == PinOverrideMode.None) {\r\n        this.overrideMask |= pinMask;\r\n      } else {\r\n        this.overrideMask &= ~pinMask;\r\n        switch (mode) {\r\n          case PinOverrideMode.Enable:\r\n            this.overrideValue &= ~pinMask;\r\n            this.overrideValue |= cpu.data[portConfig.PORT] & pinMask;\r\n            break;\r\n          case PinOverrideMode.Set:\r\n            this.overrideValue |= pinMask;\r\n            break;\r\n          case PinOverrideMode.Clear:\r\n            this.overrideValue &= ~pinMask;\r\n            break;\r\n          case PinOverrideMode.Toggle:\r\n            this.overrideValue ^= pinMask;\r\n            break;\r\n        }\r\n      }\r\n      this.writeGpio(cpu.data[portConfig.PORT], cpu.data[portConfig.DDR]);\r\n    };\r\n  }\r\n\r\n  addListener(listener: GPIOListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  removeListener(listener: GPIOListener) {\r\n    this.listeners = this.listeners.filter((l) => l !== listener);\r\n  }\r\n\r\n  /**\r\n   * Get the state of a given GPIO pin\r\n   *\r\n   * @param index Pin index to return from 0 to 7\r\n   * @returns PinState.Low or PinState.High if the pin is set to output, PinState.Input if the pin is set\r\n   *   to input, and PinState.InputPullUp if the pin is set to input and the internal pull-up resistor has\r\n   *   been enabled.\r\n   */\r\n  pinState(index: number) {\r\n    const ddr = this.cpu.data[this.portConfig.DDR];\r\n    const port = this.cpu.data[this.portConfig.PORT];\r\n    const bitMask = 1 << index;\r\n    if (ddr & bitMask) {\r\n      return this.lastValue & bitMask ? PinState.High : PinState.Low;\r\n    } else {\r\n      return port & bitMask ? PinState.InputPullUp : PinState.Input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the input value for the given pin. This is the value that\r\n   * will be returned when reading from the PIN register.\r\n   */\r\n  setPin(index: number, value: boolean) {\r\n    const bitMask = 1 << index;\r\n    this.pinValue &= ~bitMask;\r\n    if (value) {\r\n      this.pinValue |= bitMask;\r\n    }\r\n    this.updatePinRegister(this.cpu.data[this.portConfig.PORT], this.cpu.data[this.portConfig.DDR]);\r\n  }\r\n  \r\n  /*\r\n  * Will set the output of the ADC and sets analogReadFinished flag\r\n  * Written by Mark Megarry\r\n  */\r\n  setAnalogValue(analogValue: number){\r\n\t  \t//Write analogValue to ADCH and ADCL\r\n        this.cpu.data[0x78] = analogValue & 0xff;\r\n        this.cpu.data[0x79] = (analogValue >> 8) & 0x3;\r\n  }\r\n\r\n  private updatePinRegister(port: u8, ddr: u8) {\r\n    this.cpu.data[this.portConfig.PIN] = (this.pinValue & ~ddr) | (port & ddr);\r\n  }\r\n\r\n  private writeGpio(value: u8, ddr: u8) {\r\n    const newValue = ((value & this.overrideMask) | this.overrideValue) & ddr;\r\n    const prevValue = this.lastValue;\r\n    if (newValue !== prevValue || ddr !== this.lastDdr) {\r\n      this.lastValue = newValue;\r\n      this.lastDdr = ddr;\r\n      for (const listener of this.listeners) {\r\n        listener(newValue, prevValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * AVR-8 Timers\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\n\r\nimport { CPU } from '../cpu/cpu';\r\nimport { avrInterrupt } from '../cpu/interrupt';\r\nimport { portBConfig, portDConfig, PinOverrideMode } from './gpio';\r\n\r\nconst timer01Dividers = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 8,\r\n  3: 64,\r\n  4: 256,\r\n  5: 1024,\r\n  6: 0, // TODO: External clock source on T0 pin. Clock on falling edge.\r\n  7: 0, // TODO: External clock source on T0 pin. Clock on rising edge.\r\n};\r\n\r\nconst TOV = 1;\r\nconst OCFA = 2;\r\nconst OCFB = 4;\r\n\r\nconst TOIE = 1;\r\nconst OCIEA = 2;\r\nconst OCIEB = 4;\r\n\r\ntype u8 = number;\r\ntype u16 = number;\r\n\r\ninterface TimerDividers {\r\n  0: number;\r\n  1: number;\r\n  2: number;\r\n  3: number;\r\n  4: number;\r\n  5: number;\r\n  6: number;\r\n  7: number;\r\n}\r\n\r\ninterface AVRTimerConfig {\r\n  bits: 8 | 16;\r\n  captureInterrupt: u8;\r\n  compAInterrupt: u8;\r\n  compBInterrupt: u8;\r\n  ovfInterrupt: u8;\r\n\r\n  // Register addresses\r\n  TIFR: u8;\r\n  OCRA: u8;\r\n  OCRB: u8;\r\n  ICR: u8;\r\n  TCNT: u8;\r\n  TCCRA: u8;\r\n  TCCRB: u8;\r\n  TCCRC: u8;\r\n  TIMSK: u8;\r\n\r\n  dividers: TimerDividers;\r\n\r\n  // Output compare pins\r\n  compPortA: u16;\r\n  compPinA: u8;\r\n  compPortB: u16;\r\n  compPinB: u8;\r\n}\r\n\r\nexport const timer0Config: AVRTimerConfig = {\r\n  bits: 8,\r\n  captureInterrupt: 0, // not available\r\n  compAInterrupt: 0x1c,\r\n  compBInterrupt: 0x1e,\r\n  ovfInterrupt: 0x20,\r\n  TIFR: 0x35,\r\n  OCRA: 0x47,\r\n  OCRB: 0x48,\r\n  ICR: 0, // not available\r\n  TCNT: 0x46,\r\n  TCCRA: 0x44,\r\n  TCCRB: 0x45,\r\n  TCCRC: 0, // not available\r\n  TIMSK: 0x6e,\r\n  dividers: timer01Dividers,\r\n  compPortA: portDConfig.PORT,\r\n  compPinA: 6,\r\n  compPortB: portDConfig.PORT,\r\n  compPinB: 5,\r\n};\r\n\r\nexport const timer1Config: AVRTimerConfig = {\r\n  bits: 16,\r\n  captureInterrupt: 0x14,\r\n  compAInterrupt: 0x16,\r\n  compBInterrupt: 0x18,\r\n  ovfInterrupt: 0x1a,\r\n  TIFR: 0x36,\r\n  OCRA: 0x88,\r\n  OCRB: 0x8a,\r\n  ICR: 0x86,\r\n  TCNT: 0x84,\r\n  TCCRA: 0x80,\r\n  TCCRB: 0x81,\r\n  TCCRC: 0x82,\r\n  TIMSK: 0x6f,\r\n  dividers: timer01Dividers,\r\n  compPortA: portBConfig.PORT,\r\n  compPinA: 1,\r\n  compPortB: portBConfig.PORT,\r\n  compPinB: 2,\r\n};\r\n\r\nexport const timer2Config: AVRTimerConfig = {\r\n  bits: 8,\r\n  captureInterrupt: 0, // not available\r\n  compAInterrupt: 0x0e,\r\n  compBInterrupt: 0x10,\r\n  ovfInterrupt: 0x12,\r\n  TIFR: 0x37,\r\n  OCRA: 0xb3,\r\n  OCRB: 0xb4,\r\n  ICR: 0, // not available\r\n  TCNT: 0xb2,\r\n  TCCRA: 0xb0,\r\n  TCCRB: 0xb1,\r\n  TCCRC: 0, // not available\r\n  TIMSK: 0x70,\r\n  dividers: {\r\n    0: 0,\r\n    1: 1,\r\n    2: 8,\r\n    3: 32,\r\n    4: 64,\r\n    5: 128,\r\n    6: 256,\r\n    7: 1024,\r\n  },\r\n  compPortA: portBConfig.PORT,\r\n  compPinA: 3,\r\n  compPortB: portDConfig.PORT,\r\n  compPinB: 3,\r\n};\r\n\r\n/* All the following types and constants are related to WGM (Waveform Generation Mode) bits: */\r\nenum TimerMode {\r\n  Normal,\r\n  PWMPhaseCorrect,\r\n  CTC,\r\n  FastPWM,\r\n  PWMPhaseFrequencyCorrect,\r\n  Reserved,\r\n}\r\n\r\nenum TOVUpdateMode {\r\n  Max,\r\n  Top,\r\n  Bottom,\r\n}\r\n\r\nenum OCRUpdateMode {\r\n  Immediate,\r\n  Top,\r\n  Bottom,\r\n}\r\n\r\nconst TopOCRA = 1;\r\nconst TopICR = 2;\r\ntype TimerTopValue = 0xff | 0x1ff | 0x3ff | 0xffff | typeof TopOCRA | typeof TopICR;\r\n\r\ntype WGMConfig = [TimerMode, TimerTopValue, OCRUpdateMode, TOVUpdateMode];\r\n\r\nconst wgmModes8Bit: WGMConfig[] = [\r\n  /*0*/ [TimerMode.Normal, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*1*/ [TimerMode.PWMPhaseCorrect, 0xff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*2*/ [TimerMode.CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*3*/ [TimerMode.FastPWM, 0xff, OCRUpdateMode.Bottom, TOVUpdateMode.Max],\r\n  /*4*/ [TimerMode.Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*5*/ [TimerMode.PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*6*/ [TimerMode.Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*7*/ [TimerMode.FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n];\r\n\r\n// Table 16-4 in the datasheet\r\nconst wgmModes16Bit: WGMConfig[] = [\r\n  /*0 */ [TimerMode.Normal, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*1 */ [TimerMode.PWMPhaseCorrect, 0x00ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*2 */ [TimerMode.PWMPhaseCorrect, 0x01ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*3 */ [TimerMode.PWMPhaseCorrect, 0x03ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*4 */ [TimerMode.CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*5 */ [TimerMode.FastPWM, 0x00ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n  /*6 */ [TimerMode.FastPWM, 0x01ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n  /*7 */ [TimerMode.FastPWM, 0x03ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n  /*8 */ [TimerMode.PWMPhaseFrequencyCorrect, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom],\r\n  /*9 */ [TimerMode.PWMPhaseFrequencyCorrect, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom],\r\n  /*10*/ [TimerMode.PWMPhaseCorrect, TopICR, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*11*/ [TimerMode.PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom],\r\n  /*12*/ [TimerMode.CTC, TopICR, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*13*/ [TimerMode.Reserved, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max],\r\n  /*14*/ [TimerMode.FastPWM, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n  /*15*/ [TimerMode.FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top],\r\n];\r\n\r\ntype CompBitsValue = 0 | 1 | 2 | 3;\r\n\r\nfunction compToOverride(comp: CompBitsValue) {\r\n  switch (comp) {\r\n    case 1:\r\n      return PinOverrideMode.Toggle;\r\n    case 2:\r\n      return PinOverrideMode.Clear;\r\n    case 3:\r\n      return PinOverrideMode.Set;\r\n    default:\r\n      return PinOverrideMode.Enable;\r\n  }\r\n}\r\n\r\nexport class AVRTimer {\r\n  private lastCycle = 0;\r\n  private ocrA: u16 = 0;\r\n  private ocrB: u16 = 0;\r\n  private icr: u16 = 0; // only for 16-bit timers\r\n  private timerMode: TimerMode;\r\n  private topValue: TimerTopValue;\r\n  private tcnt: u16 = 0;\r\n  private compA: CompBitsValue;\r\n  private compB: CompBitsValue;\r\n  private tcntUpdated = false;\r\n  private countingUp = true;\r\n\r\n  // This is the temporary register used to access 16-bit registers (section 16.3 of the datasheet)\r\n  private highByteTemp: u8 = 0;\r\n\r\n  constructor(private cpu: CPU, private config: AVRTimerConfig) {\r\n    this.updateWGMConfig();\r\n    this.cpu.readHooks[config.TCNT] = (addr: u8) => {\r\n      this.tick();\r\n      if (this.config.bits === 16) {\r\n        this.cpu.data[addr + 1] = this.tcnt >> 8;\r\n      }\r\n      return (this.cpu.data[addr] = this.tcnt & 0xff);\r\n    };\r\n\r\n    this.cpu.writeHooks[config.TCNT] = (value: u8) => {\r\n      this.tcnt = (this.highByteTemp << 8) | value;\r\n      this.tcntUpdated = true;\r\n      this.timerUpdated();\r\n    };\r\n    this.cpu.writeHooks[config.OCRA] = (value: u8) => {\r\n      // TODO implement buffering when timer running in PWM mode\r\n      this.ocrA = (this.highByteTemp << 8) | value;\r\n    };\r\n    this.cpu.writeHooks[config.OCRB] = (value: u8) => {\r\n      // TODO implement buffering when timer running in PWM mode\r\n      this.ocrB = (this.highByteTemp << 8) | value;\r\n    };\r\n    this.cpu.writeHooks[config.ICR] = (value: u8) => {\r\n      this.icr = (this.highByteTemp << 8) | value;\r\n    };\r\n    if (this.config.bits === 16) {\r\n      const updateTempRegister = (value: u8) => {\r\n        this.highByteTemp = value;\r\n      };\r\n      this.cpu.writeHooks[config.TCNT + 1] = updateTempRegister;\r\n      this.cpu.writeHooks[config.OCRA + 1] = updateTempRegister;\r\n      this.cpu.writeHooks[config.OCRB + 1] = updateTempRegister;\r\n      this.cpu.writeHooks[config.ICR + 1] = updateTempRegister;\r\n    }\r\n    cpu.writeHooks[config.TCCRA] = (value) => {\r\n      this.cpu.data[config.TCCRA] = value;\r\n      this.compA = ((value >> 6) & 0x3) as CompBitsValue;\r\n      this.updateCompA(this.compA ? PinOverrideMode.Enable : PinOverrideMode.None);\r\n      this.compB = ((value >> 4) & 0x3) as CompBitsValue;\r\n      this.updateCompB(this.compB ? PinOverrideMode.Enable : PinOverrideMode.None);\r\n      this.updateWGMConfig();\r\n      return true;\r\n    };\r\n    cpu.writeHooks[config.TCCRB] = (value) => {\r\n      this.cpu.data[config.TCCRB] = value;\r\n      this.updateWGMConfig();\r\n      return true;\r\n    };\r\n  }\r\n\r\n  reset() {\r\n    this.lastCycle = 0;\r\n    this.ocrA = 0;\r\n    this.ocrB = 0;\r\n  }\r\n\r\n  get TIFR() {\r\n    return this.cpu.data[this.config.TIFR];\r\n  }\r\n\r\n  set TIFR(value: u8) {\r\n    this.cpu.data[this.config.TIFR] = value;\r\n  }\r\n\r\n  get TCCRA() {\r\n    return this.cpu.data[this.config.TCCRA];\r\n  }\r\n\r\n  get TCCRB() {\r\n    return this.cpu.data[this.config.TCCRB];\r\n  }\r\n\r\n  get TIMSK() {\r\n    return this.cpu.data[this.config.TIMSK];\r\n  }\r\n\r\n  get CS() {\r\n    return (this.TCCRB & 0x7) as 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\r\n  }\r\n\r\n  get WGM() {\r\n    const mask = this.config.bits === 16 ? 0x18 : 0x8;\r\n    return ((this.TCCRB & mask) >> 1) | (this.TCCRA & 0x3);\r\n  }\r\n\r\n  get TOP() {\r\n    switch (this.topValue) {\r\n      case TopOCRA:\r\n        return this.ocrA;\r\n      case TopICR:\r\n        return this.icr;\r\n      default:\r\n        return this.topValue;\r\n    }\r\n  }\r\n\r\n  private updateWGMConfig() {\r\n    const wgmModes = this.config.bits === 16 ? wgmModes16Bit : wgmModes8Bit;\r\n    const [timerMode, topValue] = wgmModes[this.WGM];\r\n    this.timerMode = timerMode;\r\n    this.topValue = topValue;\r\n  }\r\n\r\n  tick() {\r\n    const divider = this.config.dividers[this.CS];\r\n    const delta = this.cpu.cycles - this.lastCycle;\r\n    if (divider && delta >= divider) {\r\n      const counterDelta = Math.floor(delta / divider);\r\n      this.lastCycle += counterDelta * divider;\r\n      const val = this.tcnt;\r\n      const { timerMode } = this;\r\n      const phasePwm =\r\n        timerMode === TimerMode.PWMPhaseCorrect || timerMode === TimerMode.PWMPhaseFrequencyCorrect;\r\n      const newVal = phasePwm\r\n        ? this.phasePwmCount(val, counterDelta)\r\n        : (val + counterDelta) % (this.TOP + 1);\r\n      // A CPU write overrides (has priority over) all counter clear or count operations.\r\n      if (!this.tcntUpdated) {\r\n        this.tcnt = newVal;\r\n        this.timerUpdated();\r\n      }\r\n      if ((timerMode === TimerMode.Normal || timerMode === TimerMode.FastPWM) && val > newVal) {\r\n        this.TIFR |= TOV;\r\n      }\r\n    }\r\n    this.tcntUpdated = false;\r\n    if (this.cpu.interruptsEnabled) {\r\n      const { TIFR, TIMSK } = this;\r\n      if (TIFR & TOV && TIMSK & TOIE) {\r\n        avrInterrupt(this.cpu, this.config.ovfInterrupt);\r\n        this.TIFR &= ~TOV;\r\n      }\r\n      if (TIFR & OCFA && TIMSK & OCIEA) {\r\n        avrInterrupt(this.cpu, this.config.compAInterrupt);\r\n        this.TIFR &= ~OCFA;\r\n      }\r\n      if (TIFR & OCFB && TIMSK & OCIEB) {\r\n        avrInterrupt(this.cpu, this.config.compBInterrupt);\r\n        this.TIFR &= ~OCFB;\r\n      }\r\n    }\r\n  }\r\n\r\n  private phasePwmCount(value: u16, delta: u8) {\r\n    while (delta > 0) {\r\n      if (this.countingUp) {\r\n        value++;\r\n        if (value === this.TOP && !this.tcntUpdated) {\r\n          this.countingUp = false;\r\n        }\r\n      } else {\r\n        value--;\r\n        if (!value && !this.tcntUpdated) {\r\n          this.countingUp = true;\r\n          this.TIFR |= TOV;\r\n        }\r\n      }\r\n      delta--;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private timerUpdated() {\r\n    const value = this.tcnt;\r\n\r\n    if (this.ocrA && value === this.ocrA) {\r\n      this.TIFR |= OCFA;\r\n      if (this.timerMode === TimerMode.CTC) {\r\n        // Clear Timer on Compare Match (CTC) Mode\r\n        this.tcnt = 0;\r\n        this.TIFR |= TOV;\r\n      }\r\n      if (this.compA) {\r\n        this.updateCompPin(this.compA, 'A');\r\n      }\r\n    }\r\n    if (this.ocrB && value === this.ocrB) {\r\n      this.TIFR |= OCFB;\r\n      if (this.compB) {\r\n        this.updateCompPin(this.compB, 'B');\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateCompPin(compValue: CompBitsValue, pinName: 'A' | 'B') {\r\n    let newValue: PinOverrideMode = PinOverrideMode.None;\r\n    const inverted = compValue === 3;\r\n    const isSet = this.countingUp === inverted;\r\n    switch (this.timerMode) {\r\n      case TimerMode.Normal:\r\n      case TimerMode.CTC:\r\n      case TimerMode.FastPWM:\r\n        newValue = compToOverride(compValue);\r\n        break;\r\n\r\n      case TimerMode.PWMPhaseCorrect:\r\n      case TimerMode.PWMPhaseFrequencyCorrect:\r\n        newValue = isSet ? PinOverrideMode.Set : PinOverrideMode.Clear;\r\n        break;\r\n    }\r\n\r\n    if (newValue !== PinOverrideMode.None) {\r\n      if (pinName === 'A') {\r\n        this.updateCompA(newValue);\r\n      } else {\r\n        this.updateCompB(newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateCompA(value: PinOverrideMode) {\r\n    const { compPortA, compPinA } = this.config;\r\n    const hook = this.cpu.gpioTimerHooks[compPortA];\r\n    if (hook) {\r\n      hook(compPinA, value, compPortA);\r\n    }\r\n  }\r\n\r\n  private updateCompB(value: PinOverrideMode) {\r\n    const { compPortB, compPinB } = this.config;\r\n    const hook = this.cpu.gpioTimerHooks[compPortB];\r\n    if (hook) {\r\n      hook(compPinB, value, compPortB);\r\n    }\r\n  }\r\n}\r\n","import { CPU } from '../cpu/cpu';\r\nimport { avrInterrupt } from '../cpu/interrupt';\r\nimport { u8 } from '../types';\r\n\r\nexport interface USARTConfig {\r\n  rxCompleteInterrupt: u8;\r\n  dataRegisterEmptyInterrupt: u8;\r\n  txCompleteInterrupt: u8;\r\n\r\n  UCSRA: u8;\r\n  UCSRB: u8;\r\n  UCSRC: u8;\r\n  UBRRL: u8;\r\n  UBRRH: u8;\r\n  UDR: u8;\r\n}\r\n\r\nexport const usart0Config: USARTConfig = {\r\n  rxCompleteInterrupt: 0x24,\r\n  dataRegisterEmptyInterrupt: 0x26,\r\n  txCompleteInterrupt: 0x28,\r\n  UCSRA: 0xc0,\r\n  UCSRB: 0xc1,\r\n  UCSRC: 0xc2,\r\n  UBRRL: 0xc4,\r\n  UBRRH: 0xc5,\r\n  UDR: 0xc6,\r\n};\r\n\r\nexport type USARTTransmitCallback = (value: u8) => void;\r\nexport type USARTLineTransmitCallback = (value: string) => void;\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst UCSRA_RXC = 0x80; // USART Receive Complete\r\nconst UCSRA_TXC = 0x40; // USART Transmit Complete\r\nconst UCSRA_UDRE = 0x20; // USART Data Register Empty\r\nconst UCSRA_FE = 0x10; // Frame Error\r\nconst UCSRA_DOR = 0x8; // Data OverRun\r\nconst UCSRA_UPE = 0x4; // USART Parity Error\r\nconst UCSRA_U2X = 0x2; // Double the USART Transmission Speed\r\nconst UCSRA_MPCM = 0x1; // Multi-processor Communication Mode\r\nconst UCSRB_RXCIE = 0x80; // RX Complete Interrupt Enable\r\nconst UCSRB_TXCIE = 0x40; // TX Complete Interrupt Enable\r\nconst UCSRB_UDRIE = 0x20; // USART Data Register Empty Interrupt Enable\r\nconst UCSRB_RXEN = 0x10; // Receiver Enable\r\nconst UCSRB_TXEN = 0x8; // Transmitter Enable\r\nconst UCSRB_UCSZ2 = 0x4; // Character Size 2\r\nconst UCSRB_RXB8 = 0x2; // Receive Data Bit 8\r\nconst UCSRB_TXB8 = 0x1; // Transmit Data Bit 8\r\nconst UCSRC_UMSEL1 = 0x80; // USART Mode Select 1\r\nconst UCSRC_UMSEL0 = 0x40; // USART Mode Select 0\r\nconst UCSRC_UPM1 = 0x20; // Parity Mode 1\r\nconst UCSRC_UPM0 = 0x10; // Parity Mode 0\r\nconst UCSRC_USBS = 0x8; // Stop Bit Select\r\nconst UCSRC_UCSZ1 = 0x4; // Character Size 1\r\nconst UCSRC_UCSZ0 = 0x2; // Character Size 0\r\nconst UCSRC_UCPOL = 0x1; // Clock Polarity\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\nexport class AVRUSART {\r\n  public onByteTransmit: USARTTransmitCallback | null = null;\r\n  public onLineTransmit: USARTLineTransmitCallback | null = null;\r\n\r\n  private lineBuffer = '';\r\n\r\n  constructor(private cpu: CPU, private config: USARTConfig, private freqMHz: number) {\r\n    this.cpu.writeHooks[config.UCSRA] = (value) => {\r\n      this.cpu.data[config.UCSRA] = value | UCSRA_UDRE | UCSRA_TXC;\r\n      return true;\r\n    };\r\n    this.cpu.writeHooks[config.UCSRB] = (value, oldValue) => {\r\n      if (value & UCSRB_TXEN && !(oldValue & UCSRB_TXEN)) {\r\n        // Enabling the transmission - mark UDR as empty\r\n        this.cpu.data[config.UCSRA] |= UCSRA_UDRE;\r\n      }\r\n    };\r\n    this.cpu.writeHooks[config.UDR] = (value) => {\r\n      if (this.onByteTransmit) {\r\n        this.onByteTransmit(value);\r\n      }\r\n      if (this.onLineTransmit) {\r\n        const ch = String.fromCharCode(value);\r\n        if (ch === '\\n') {\r\n          this.onLineTransmit(this.lineBuffer);\r\n          this.lineBuffer = '';\r\n        } else {\r\n          this.lineBuffer += ch;\r\n        }\r\n      }\r\n      this.cpu.data[config.UCSRA] |= UCSRA_UDRE | UCSRA_TXC;\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    if (this.cpu.interruptsEnabled) {\r\n      const ucsra = this.cpu.data[this.config.UCSRA];\r\n      const ucsrb = this.cpu.data[this.config.UCSRB];\r\n      if (ucsra & UCSRA_UDRE && ucsrb & UCSRB_UDRIE) {\r\n        avrInterrupt(this.cpu, this.config.dataRegisterEmptyInterrupt);\r\n        this.cpu.data[this.config.UCSRA] &= ~UCSRA_UDRE;\r\n      }\r\n      if (ucsra & UCSRA_TXC && ucsrb & UCSRB_TXCIE) {\r\n        avrInterrupt(this.cpu, this.config.txCompleteInterrupt);\r\n        this.cpu.data[this.config.UCSRA] &= ~UCSRA_TXC;\r\n      }\r\n    }\r\n  }\r\n\r\n  get baudRate() {\r\n    const UBRR = (this.cpu.data[this.config.UBRRH] << 8) | this.cpu.data[this.config.UBRRL];\r\n    const multiplier = this.cpu.data[this.config.UCSRA] & UCSRA_U2X ? 8 : 16;\r\n    return Math.floor(this.freqMHz / (multiplier * (1 + UBRR)));\r\n  }\r\n\r\n  get bitsPerChar() {\r\n    const ucsz =\r\n      ((this.cpu.data[this.config.UCSRC] & (UCSRC_UCSZ1 | UCSRC_UCSZ0)) >> 1) |\r\n      (this.cpu.data[this.config.UCSRB] & UCSRB_UCSZ2);\r\n    switch (ucsz) {\r\n      case 0:\r\n        return 5;\r\n      case 1:\r\n        return 6;\r\n      case 2:\r\n        return 7;\r\n      case 3:\r\n        return 8;\r\n      default: // 4..6 are reserved\r\n      case 7:\r\n        return 9;\r\n    }\r\n  }\r\n}\r\n","import { CPU } from '../cpu/cpu';\r\nimport { avrInterrupt } from '../cpu/interrupt';\r\nimport { u8, u16, u32 } from '../types';\r\n\r\nexport interface EEPROMBackend {\r\n  readMemory(addr: u16): u8;\r\n  writeMemory(addr: u16, value: u8): void;\r\n  eraseMemory(addr: u16): void;\r\n}\r\n\r\nexport class EEPROMMemoryBackend implements EEPROMBackend {\r\n  readonly memory: Uint8Array;\r\n\r\n  constructor(size: u16) {\r\n    this.memory = new Uint8Array(size);\r\n    this.memory.fill(0xff);\r\n  }\r\n\r\n  readMemory(addr: u16) {\r\n    return this.memory[addr];\r\n  }\r\n\r\n  writeMemory(addr: u16, value: u8) {\r\n    this.memory[addr] &= value;\r\n  }\r\n\r\n  eraseMemory(addr: u16) {\r\n    this.memory[addr] = 0xff;\r\n  }\r\n}\r\n\r\nexport interface AVREEPROMConfig {\r\n  eepromReadyInterrupt: u8;\r\n\r\n  EECR: u8;\r\n  EEDR: u8;\r\n  EEARL: u8;\r\n  EEARH: u8;\r\n\r\n  /** The amount of clock cycles erase takes */\r\n  eraseCycles: u32;\r\n  /** The amount of clock cycles a write takes */\r\n  writeCycles: u32;\r\n}\r\n\r\nexport const eepromConfig: AVREEPROMConfig = {\r\n  eepromReadyInterrupt: 0x2c,\r\n  EECR: 0x3f,\r\n  EEDR: 0x40,\r\n  EEARL: 0x41,\r\n  EEARH: 0x42,\r\n  eraseCycles: 28800, // 1.8ms at 16MHz\r\n  writeCycles: 28800, // 1.8ms at 16MHz\r\n};\r\n\r\nconst EERE = 1 << 0;\r\nconst EEPE = 1 << 1;\r\nconst EEMPE = 1 << 2;\r\nconst EERIE = 1 << 3;\r\nconst EEPM0 = 1 << 4;\r\nconst EEPM1 = 1 << 5;\r\n\r\nexport class AVREEPROM {\r\n  /**\r\n   * Used to keep track on the last write to EEMPE. From the datasheet:\r\n   * The EEMPE bit determines whether setting EEPE to one causes the EEPROM to be written.\r\n   * When EEMPE is set, setting EEPE within four clock cycles will write data to the EEPROM\r\n   * at the selected address If EEMPE is zero, setting EEPE will have no effect.\r\n   */\r\n  private writeEnabledCycles = 0;\r\n\r\n  private writeCompleteCycles = 0;\r\n\r\n  constructor(\r\n    private cpu: CPU,\r\n    private backend: EEPROMBackend,\r\n    private config: AVREEPROMConfig = eepromConfig\r\n  ) {\r\n    this.cpu.writeHooks[this.config.EECR] = (eecr) => {\r\n      const { EEARH, EEARL, EECR, EEDR } = this.config;\r\n\r\n      const addr = (this.cpu.data[EEARH] << 8) | this.cpu.data[EEARL];\r\n\r\n      if (eecr & EEMPE) {\r\n        this.writeEnabledCycles = this.cpu.cycles + 4;\r\n      }\r\n\r\n      // Read\r\n      if (eecr & EERE) {\r\n        this.cpu.data[EEDR] = this.backend.readMemory(addr);\r\n        // When the EEPROM is read, the CPU is halted for four cycles before the\r\n        // next instruction is executed.\r\n        this.cpu.cycles += 4;\r\n        return true;\r\n      }\r\n\r\n      // Write\r\n      if (eecr & EEPE) {\r\n        //  If EEMPE is zero, setting EEPE will have no effect.\r\n        if (this.cpu.cycles >= this.writeEnabledCycles) {\r\n          return true;\r\n        }\r\n        // Check for write-in-progress\r\n        if (this.cpu.cycles < this.writeCompleteCycles) {\r\n          return true;\r\n        }\r\n\r\n        const eedr = this.cpu.data[EEDR];\r\n\r\n        this.writeCompleteCycles = this.cpu.cycles;\r\n\r\n        // Erase\r\n        if (!(eecr & EEPM1)) {\r\n          this.backend.eraseMemory(addr);\r\n          this.writeCompleteCycles += this.config.eraseCycles;\r\n        }\r\n        // Write\r\n        if (!(eecr & EEPM0)) {\r\n          this.backend.writeMemory(addr, eedr);\r\n          this.writeCompleteCycles += this.config.writeCycles;\r\n        }\r\n\r\n        this.cpu.data[EECR] |= EEPE;\r\n        // When EEPE has been set, the CPU is halted for two cycles before the\r\n        // next instruction is executed.\r\n        this.cpu.cycles += 2;\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    const { EECR, eepromReadyInterrupt } = this.config;\r\n\r\n    if (this.writeEnabledCycles && this.cpu.cycles > this.writeEnabledCycles) {\r\n      this.cpu.data[EECR] &= ~EEMPE;\r\n    }\r\n    if (this.writeCompleteCycles && this.cpu.cycles > this.writeCompleteCycles) {\r\n      this.cpu.data[EECR] &= ~EEPE;\r\n      if (this.cpu.interruptsEnabled && this.cpu.data[EECR] & EERIE) {\r\n        avrInterrupt(this.cpu, eepromReadyInterrupt);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CPU } from '../cpu/cpu';\r\nimport { avrInterrupt } from '../cpu/interrupt';\r\nimport { u8 } from '../types';\r\n\r\nexport interface TWIEventHandler {\r\n  start(repeated: boolean): void;\r\n\r\n  stop(): void;\r\n\r\n  connectToSlave(addr: u8, write: boolean): void;\r\n\r\n  writeByte(value: u8): void;\r\n\r\n  readByte(ack: boolean): void;\r\n}\r\n\r\nexport interface TWIConfig {\r\n  twiInterrupt: u8;\r\n\r\n  TWBR: u8;\r\n  TWCR: u8;\r\n  TWSR: u8;\r\n  TWDR: u8;\r\n  TWAR: u8;\r\n  TWAMR: u8;\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst TWCR_TWINT = 0x80; // TWI Interrupt Flag\r\nconst TWCR_TWEA = 0x40; // TWI Enable Acknowledge Bit\r\nconst TWCR_TWSTA = 0x20; // TWI START Condition Bit\r\nconst TWCR_TWSTO = 0x10; // TWI STOP Condition Bit\r\nconst TWCR_TWWC = 0x8; //TWI Write Collision Flag\r\nconst TWCR_TWEN = 0x4; //  TWI Enable Bit\r\nconst TWCR_TWIE = 0x1; // TWI Interrupt Enable\r\nconst TWSR_TWS_MASK = 0xf8; // TWI Status\r\nconst TWSR_TWPS1 = 0x2; // TWI Prescaler Bits\r\nconst TWSR_TWPS0 = 0x1; // TWI Prescaler Bits\r\nconst TWSR_TWPS_MASK = TWSR_TWPS1 | TWSR_TWPS0; // TWI Prescaler mask\r\nconst TWAR_TWA_MASK = 0xfe; //  TWI (Slave) Address Register\r\nconst TWAR_TWGCE = 0x1; // TWI General Call Recognition Enable Bit\r\n\r\nconst STATUS_BUS_ERROR = 0x0;\r\nconst STATUS_TWI_IDLE = 0xf8;\r\n// Master states\r\nconst STATUS_START = 0x08;\r\nconst STATUS_REPEATED_START = 0x10;\r\nconst STATUS_SLAW_ACK = 0x18;\r\nconst STATUS_SLAW_NACK = 0x20;\r\nconst STATUS_DATA_SENT_ACK = 0x28;\r\nconst STATUS_DATA_SENT_NACK = 0x30;\r\nconst STATUS_DATA_LOST_ARBITRATION = 0x38;\r\nconst STATUS_SLAR_ACK = 0x40;\r\nconst STATUS_SLAR_NACK = 0x48;\r\nconst STATUS_DATA_RECEIVED_ACK = 0x50;\r\nconst STATUS_DATA_RECEIVED_NACK = 0x58;\r\n// TODO: add slave states\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\nexport const twiConfig: TWIConfig = {\r\n  twiInterrupt: 0x30,\r\n  TWBR: 0xb8,\r\n  TWSR: 0xb9,\r\n  TWAR: 0xba,\r\n  TWDR: 0xbb,\r\n  TWCR: 0xbc,\r\n  TWAMR: 0xbd,\r\n};\r\n\r\n// A simple TWI Event Handler that sends a NACK for all events\r\nexport class NoopTWIEventHandler implements TWIEventHandler {\r\n  constructor(protected twi: AVRTWI) {}\r\n\r\n  start() {\r\n    this.twi.completeStart();\r\n  }\r\n\r\n  stop() {\r\n    this.twi.completeStop();\r\n  }\r\n\r\n  connectToSlave() {\r\n    this.twi.completeConnect(false);\r\n  }\r\n\r\n  writeByte() {\r\n    this.twi.completeWrite(false);\r\n  }\r\n\r\n  readByte() {\r\n    this.twi.completeRead(0xff);\r\n  }\r\n}\r\n\r\nexport class AVRTWI {\r\n  public eventHandler: TWIEventHandler = new NoopTWIEventHandler(this);\r\n\r\n  private nextTick: (() => void) | null = null;\r\n\r\n  constructor(private cpu: CPU, private config: TWIConfig, private freqMHz: number) {\r\n    this.updateStatus(STATUS_TWI_IDLE);\r\n    this.cpu.writeHooks[config.TWCR] = (value) => {\r\n      const clearInt = value & TWCR_TWINT;\r\n      if (clearInt) {\r\n        value &= ~TWCR_TWINT;\r\n      }\r\n      const { status } = this;\r\n      if (clearInt && value & TWCR_TWEN) {\r\n        const twdrValue = this.cpu.data[this.config.TWDR];\r\n        this.nextTick = () => {\r\n          if (value & TWCR_TWSTA) {\r\n            this.eventHandler.start(status !== STATUS_TWI_IDLE);\r\n          } else if (value & TWCR_TWSTO) {\r\n            this.eventHandler.stop();\r\n          } else if (status === STATUS_START) {\r\n            this.eventHandler.connectToSlave(twdrValue >> 1, twdrValue & 0x1 ? false : true);\r\n          } else if (status === STATUS_SLAW_ACK || status === STATUS_DATA_SENT_ACK) {\r\n            this.eventHandler.writeByte(twdrValue);\r\n          } else if (status === STATUS_SLAR_ACK || status === STATUS_DATA_RECEIVED_ACK) {\r\n            const ack = !!(value & TWCR_TWEA);\r\n            this.eventHandler.readByte(ack);\r\n          }\r\n        };\r\n        this.cpu.data[config.TWCR] = value;\r\n        return true;\r\n      }\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    if (this.nextTick) {\r\n      this.nextTick();\r\n      this.nextTick = null;\r\n    }\r\n    if (this.cpu.interruptsEnabled) {\r\n      const { TWCR, twiInterrupt } = this.config;\r\n      if (this.cpu.data[TWCR] & TWCR_TWIE && this.cpu.data[TWCR] & TWCR_TWINT) {\r\n        avrInterrupt(this.cpu, twiInterrupt);\r\n        this.cpu.data[TWCR] &= ~TWCR_TWINT;\r\n      }\r\n    }\r\n  }\r\n\r\n  get prescaler() {\r\n    switch (this.cpu.data[this.config.TWSR] & TWSR_TWPS_MASK) {\r\n      case 0:\r\n        return 1;\r\n      case 1:\r\n        return 4;\r\n      case 2:\r\n        return 16;\r\n      case 3:\r\n        return 64;\r\n    }\r\n    // We should never get here:\r\n    throw new Error('Invalid prescaler value!');\r\n  }\r\n\r\n  get sclFrequency() {\r\n    return this.freqMHz / (16 + 2 * this.cpu.data[this.config.TWBR] * this.prescaler);\r\n  }\r\n\r\n  completeStart() {\r\n    this.updateStatus(this.status === STATUS_TWI_IDLE ? STATUS_START : STATUS_REPEATED_START);\r\n  }\r\n\r\n  completeStop() {\r\n    this.cpu.data[this.config.TWCR] &= ~TWCR_TWSTO;\r\n    this.updateStatus(STATUS_TWI_IDLE);\r\n  }\r\n\r\n  completeConnect(ack: boolean) {\r\n    if (this.cpu.data[this.config.TWDR] & 0x1) {\r\n      this.updateStatus(ack ? STATUS_SLAR_ACK : STATUS_SLAR_NACK);\r\n    } else {\r\n      this.updateStatus(ack ? STATUS_SLAW_ACK : STATUS_SLAW_NACK);\r\n    }\r\n  }\r\n\r\n  completeWrite(ack: boolean) {\r\n    this.updateStatus(ack ? STATUS_DATA_SENT_ACK : STATUS_DATA_SENT_NACK);\r\n  }\r\n\r\n  completeRead(value: u8) {\r\n    const ack = !!(this.cpu.data[this.config.TWCR] & TWCR_TWEA);\r\n    this.cpu.data[this.config.TWDR] = value;\r\n    this.updateStatus(ack ? STATUS_DATA_RECEIVED_ACK : STATUS_DATA_RECEIVED_NACK);\r\n  }\r\n\r\n  private get status() {\r\n    return this.cpu.data[this.config.TWSR] & TWSR_TWS_MASK;\r\n  }\r\n\r\n  private updateStatus(value: u8) {\r\n    const { TWCR, TWSR } = this.config;\r\n    this.cpu.data[TWSR] = (this.cpu.data[TWSR] & ~TWSR_TWS_MASK) | value;\r\n    this.cpu.data[TWCR] |= TWCR_TWINT;\r\n  }\r\n}\r\n","/**\r\n * AVR8js\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\n\r\nexport { CPU, ICPU, CPUMemoryHook, CPUMemoryHooks } from './cpu/cpu';\r\nexport { avrInstruction } from './cpu/instruction';\r\nexport { avrInterrupt } from './cpu/interrupt';\r\nexport { AVRTimer, timer0Config, timer1Config, timer2Config } from './peripherals/timer';\r\nexport {\r\n  AVRIOPort,\r\n  GPIOListener,\r\n  AVRPortConfig,\r\n  portAConfig,\r\n  portBConfig,\r\n  portCConfig,\r\n  portDConfig,\r\n  portEConfig,\r\n  portFConfig,\r\n  portGConfig,\r\n  portHConfig,\r\n  portJConfig,\r\n  portKConfig,\r\n  portLConfig,\r\n  PinState,\r\n} from './peripherals/gpio';\r\nexport { AVRUSART, usart0Config } from './peripherals/usart';\r\nexport {\r\n  AVREEPROM,\r\n  AVREEPROMConfig,\r\n  EEPROMBackend,\r\n  EEPROMMemoryBackend,\r\n  eepromConfig,\r\n} from './peripherals/eeprom';\r\nexport * from './peripherals/twi';\r\n","/**\r\n * Minimal Intel HEX loader\r\n * Part of AVR8js\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\n\r\nexport function loadHex(source: string, target: Uint8Array) {\r\n  for (const line of source.split('\\n')) {\r\n    if (line[0] === ':' && line.substr(7, 2) === '00') {\r\n      const bytes = parseInt(line.substr(1, 2), 16);\r\n      const addr = parseInt(line.substr(3, 4), 16);\r\n      for (let i = 0; i < bytes; i++) {\r\n        target[addr + i] = parseInt(line.substr(9 + i * 2, 2), 16);\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Faster setTimeout(fn, 0) implementation using postMessage API\r\n// Based on https://dbaron.org/log/20100309-faster-timeouts\r\nexport type IMicroTaskCallback = () => void;\r\n\r\nexport class MicroTaskScheduler {\r\n  readonly messageName = 'zero-timeout-message';\r\n\r\n  private executionQueue: Array<IMicroTaskCallback> = [];\r\n  private stopped = true;\r\n\r\n  start() {\r\n    if (this.stopped) {\r\n      this.stopped = false;\r\n      window.addEventListener('message', this.handleMessage, true);\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.stopped = true;\r\n    window.removeEventListener('message', this.handleMessage, true);\r\n  }\r\n\r\n  postTask(fn: IMicroTaskCallback) {\r\n    if (!this.stopped) {\r\n      this.executionQueue.push(fn);\r\n      window.postMessage(this.messageName, '*');\r\n    }\r\n  }\r\n\r\n  private handleMessage = (event: MessageEvent) => {\r\n    if (event.data === this.messageName) {\r\n      event.stopPropagation();\r\n      const executeJob = this.executionQueue.shift();\r\n      if (executeJob !== undefined) {\r\n        executeJob();\r\n      }\r\n    }\r\n  };\r\n}\r\n","//Edited version of demo file provided by Wokwi at https://github.com/wokwi/avr8js/blob/master/demo/src/execute.ts\r\n//Edited by Mark Megarry August 2020\r\nimport {\r\n  avrInstruction,\r\n  AVRTimer,\r\n  CPU,\r\n  timer0Config,\r\n  timer1Config,\r\n  timer2Config,\r\n  AVRIOPort,\r\n  AVRUSART,\r\n  portBConfig,\r\n  portCConfig,\r\n  portDConfig,\r\n  usart0Config,\r\n} from 'avr8js';\r\nimport { loadHex } from './intelhex';\r\nimport { MicroTaskScheduler } from './task-scheduler';\r\n\r\n// ATmega328p params\r\nconst FLASH = 0x8000;\r\nexport class AVRRunner {\r\n  readonly program = new Uint16Array(FLASH);\r\n  readonly cpu: CPU;\r\n  readonly timer0: AVRTimer;\r\n  readonly timer1: AVRTimer;\r\n  readonly timer2: AVRTimer;\r\n  readonly portB: AVRIOPort;\r\n  readonly portC: AVRIOPort;\r\n  readonly portD: AVRIOPort;\r\n  readonly usart: AVRUSART;\r\n  readonly speed = 16e6; // 16 MHZ\r\n  readonly workUnitCycles = 500000;\r\n  readonly taskScheduler = new MicroTaskScheduler();\r\n\r\n  constructor(hex: string) {\r\n    loadHex(hex, new Uint8Array(this.program.buffer));\r\n    this.cpu = new CPU(this.program);\r\n    this.timer0 = new AVRTimer(this.cpu, timer0Config);\r\n    this.timer1 = new AVRTimer(this.cpu, timer1Config);\r\n    this.timer2 = new AVRTimer(this.cpu, timer2Config);\r\n    this.portB = new AVRIOPort(this.cpu, portBConfig);\r\n    this.portC = new AVRIOPort(this.cpu, portCConfig);\r\n    this.portD = new AVRIOPort(this.cpu, portDConfig);\r\n    this.usart = new AVRUSART(this.cpu, usart0Config, this.speed);\r\n\t\r\n\t// Simulate analog port (so that analogRead() eventually return)\r\n    this.cpu.writeHooks[0x7a] = value => {\r\n\t\t//globalThis.console.log(value);\tCheck what value is\r\n      if (value & (1 << 6)) {\r\n        this.cpu.data[0x7a] = value & ~(1 << 6); // clear bit - conversion done\r\n\t\tconst ADMUXval = this.cpu.data[0x7c];\t//Value held in ADMUX selection register\r\n\t\tconst analogPin = ADMUXval & 15;\t//Apply mask to clear first 4 bits as only latter half is important for selection\r\n\t\tglobalThis.AVR8jsFalstad.Runner.portC.setAnalogValue(globalThis.AVR8jsFalstad.analogArray[analogPin]);\r\n        return true; // don't update\r\n      }\r\n    };\r\n\t\r\n    this.taskScheduler.start();\r\n\tglobalThis.AVR8jsFalstad.CircuitTime = new globalThis.JSCircuitTime;\t//Added by Mark Megarry\r\n\tglobalThis.AVR8jsFalstad.prevTime = globalThis.AVR8jsFalstad.CircuitTime.getTime(); //Added by Mark Megarry\r\n  }\r\n\t\r\n  // CPU main loop\r\n  //var timeDiff = globalThis.CircuitTime.getTime() - prevTime;\r\n  //var timeBasedCycles = timeDiff*speed;\r\n  execute(callback: (cpu: CPU) => any) {\r\n\tvar timeDiff = globalThis.AVR8jsFalstad.CircuitTime.getTime() - globalThis.AVR8jsFalstad.prevTime;\t//Added by Mark Megarry\r\n\tglobalThis.AVR8jsFalstad.timeBasedCycles = timeDiff*this.speed;\t//Added by Mark Megarry\r\n    const cyclesToRun = this.cpu.cycles + globalThis.AVR8jsFalstad.timeBasedCycles; //Edited by Mark Megarry\r\n    while (this.cpu.cycles < cyclesToRun) {\r\n      avrInstruction(this.cpu);\r\n      this.timer0.tick();\r\n      this.timer1.tick();\r\n      this.timer2.tick();\r\n      this.usart.tick();\r\n\t  \r\n    }\r\n\t//prevTime = CircuitTime.getTime();\r\n\tglobalThis.AVR8jsFalstad.prevTime = globalThis.AVR8jsFalstad.CircuitTime.getTime();\t//Added by Mark Megarry\r\n    callback(this.cpu);\r\n    this.taskScheduler.postTask(() => this.execute(callback));\r\n  }\r\n\r\n  stop() {\r\n    this.taskScheduler.stop();\r\n  }\r\n}\r\n","function zeroPad(value: number, length: number) {\r\n  let sval = value.toString();\r\n  while (sval.length < length) {\r\n    sval = '0' + sval;\r\n  }\r\n  return sval;\r\n}\r\n\r\nexport function formatTime(seconds: number) {\r\n  const ms = Math.floor(seconds * 1000) % 1000;\r\n  const secs = Math.floor(seconds % 60);\r\n  const mins = Math.floor(seconds / 60);\r\n  return `${zeroPad(mins, 2)}:${zeroPad(secs, 2)}.${zeroPad(ms, 3)}`;\r\n}\r\n","const AVRJS8_EDITOR_HISTORY = 'AVRJS8_EDITOR_HISTORY';\r\n\r\nexport class EditorHistoryUtil {\r\n  static hasLocalStorage = !!window.localStorage;\r\n\r\n  static storeSnippet(codeSnippet: string) {\r\n    if (!EditorHistoryUtil.hasLocalStorage) {\r\n      return;\r\n    }\r\n    window.localStorage.setItem(AVRJS8_EDITOR_HISTORY, codeSnippet);\r\n  }\r\n\r\n  static clearSnippet() {\r\n    if (!EditorHistoryUtil.hasLocalStorage) {\r\n      return;\r\n    }\r\n    localStorage.removeItem(AVRJS8_EDITOR_HISTORY);\r\n  }\r\n\r\n  static getValue() {\r\n    if (!EditorHistoryUtil.hasLocalStorage) {\r\n      return;\r\n    }\r\n    return localStorage.getItem(AVRJS8_EDITOR_HISTORY);\r\n  }\r\n}\r\n","//This is an edited version of the demo program provided by Wokwi at https://github.com/wokwi/avr8js/blob/master/demo/src/index.ts\r\n//Edited by Mark Megarry August 2020\r\n\r\nimport { PinState } from 'avr8js';\r\nimport { buildHex } from './compile';\r\nimport { CPUPerformance } from './cpu-performance';\r\nimport { AVRRunner } from './execute';\r\nimport { formatTime } from './format-time';\r\nimport './index.css';\r\nimport { EditorHistoryUtil } from './utils/editor-history.util';\r\nlet editor: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\nconst BLINK_CODE = `\r\n//Pin 7 is accessed by pin D7\r\n//Pin 13 is accessed by pin B5\r\n//Pin 11 is accessed by pin B3\r\n\r\nvoid setup() {\r\n  pinMode(13, OUTPUT);\r\n  pinMode(7, INPUT);\r\n  digitalWrite(13, LOW);\r\n  analogWrite(11, 100);\r\n   Serial.begin(115200);\r\n   Serial.println(\"Program is starting...\");\r\n}\r\n\r\nvoid loop() {\r\n  if(digitalRead(7) == HIGH){\r\n    digitalWrite(13, HIGH);\r\n  }\r\n\r\n  else if(digitalRead(7) == LOW){\r\n    digitalWrite(13, LOW);\r\n  }\r\n}`.trim();\r\n\r\n// Load Editor\r\ndeclare const window: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\ndeclare const monaco: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\nwindow.require.config({\r\n  paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs' },\r\n});\r\nwindow.require(['vs/editor/editor.main'], () => {\r\n  editor = monaco.editor.create(document.querySelector('.code-editor'), {\r\n    value: EditorHistoryUtil.getValue() || BLINK_CODE,\r\n    language: 'cpp',\r\n    minimap: { enabled: false },\r\n  });\r\n});\r\n\r\nconst runButton = document.querySelector('#run-button');\r\nrunButton.addEventListener('click', compileAndRun);\r\nconst stopButton = document.querySelector('#stop-button');\r\nstopButton.addEventListener('click', stopCode);\r\nconst revertButton = document.querySelector('#revert-button');\r\nrevertButton.addEventListener('click', setBlinkSnippet);\r\nconst statusLabel = document.querySelector('#status-label');\r\nconst compilerOutputText = document.querySelector('#compiler-output-text');\r\nconst serialOutputText = document.querySelector('#serial-output-text');\r\n\r\nfunction executeProgram(hex: string) {\r\n   globalThis.AVR8jsFalstad.Runner = new AVRRunner(hex);\r\n   const MHZ = 16000000;\r\n\r\n  globalThis.AVR8jsFalstad.Runner.usart.onByteTransmit = (value) => {\r\n    serialOutputText.textContent += String.fromCharCode(value);\r\n  };\r\n  const cpuPerf = new CPUPerformance(globalThis.AVR8jsFalstad.Runner.cpu, MHZ);\r\n  globalThis.AVR8jsFalstad.Runner.execute((cpu) => {\r\n    const time = formatTime(cpu.cycles / MHZ);\r\n    const speed = (cpuPerf.update() * 100).toFixed(0);\r\n    statusLabel.textContent = `Simulation time: ${time} (${speed}%)`;\r\n  });\r\n}\r\n\r\nasync function compileAndRun() {\r\n  storeUserSnippet();\r\n\r\n  runButton.setAttribute('disabled', '1');\r\n  revertButton.setAttribute('disabled', '1');\r\n\r\n  serialOutputText.textContent = '';\r\n  try {\r\n    statusLabel.textContent = 'Compiling...';\r\n    const result = await buildHex(editor.getModel().getValue());\r\n    compilerOutputText.textContent = result.stderr || result.stdout;\r\n    if (result.hex) {\r\n      compilerOutputText.textContent += '\\nProgram running...';\r\n      stopButton.removeAttribute('disabled');\r\n      executeProgram(result.hex);\r\n    } else {\r\n      runButton.removeAttribute('disabled');\r\n    }\r\n  } catch (err) {\r\n    runButton.removeAttribute('disabled');\r\n    revertButton.removeAttribute('disabled');\r\n    alert('Failed: ' + err);\r\n  } finally {\r\n    statusLabel.textContent = '';\r\n  }\r\n}\r\n\r\nfunction storeUserSnippet() {\r\n  EditorHistoryUtil.clearSnippet();\r\n  EditorHistoryUtil.storeSnippet(editor.getValue());\r\n}\r\n\r\nfunction stopCode() {\r\n  stopButton.setAttribute('disabled', '1');\r\n  runButton.removeAttribute('disabled');\r\n  //revertButton.removeAttribute('disabled');\r\n  if (globalThis.AVR8jsFalstad.Runner) {\r\n    globalThis.AVR8jsFalstad.Runner.stop();\r\n    globalThis.AVR8jsFalstad.Runner = null;\r\n  }\r\n}\r\n\r\nfunction setBlinkSnippet() {\r\n  editor.setValue(BLINK_CODE);\r\n  EditorHistoryUtil.storeSnippet(editor.getValue());\r\n}\r\n"]}